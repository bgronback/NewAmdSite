buildscript {
	ext {
		springBootVersion = '1.5.8.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath group: 'com.bmuschko', name: 'gradle-docker-plugin', version: '3.0.1'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

import com.bmuschko.gradle.docker.tasks.image.*

group = 'com.amdinstallation'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

eclipse {
  classpath {
    defaultOutputDir = file('build/classes/main')
    downloadSources = true
    downloadJavadoc = false
  }
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-mongodb', version: '1.5.8.RELEASE'
	compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.17'
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
	compile group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: '1.5.8.RELEASE'
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: '1.5.8.RELEASE'
	
	compile group: 'org.apache.poi', name: 'poi', version: '3.15'
	compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.15'

	testCompile('org.springframework.boot:spring-boot-starter-test')
}

def bundleName = 'com.amdinstallation.service.web'
def packageRoot = '/opt/amd/service/web'
def timestamp = '.v' + new Date().format('yyyyMMddHHmm')
def config = System.getProperty('config', 'application.properties')

group = 'amd'
project.version = '1.0.0' + timestamp

task deploy(type: Copy) {
    from "/root/videos"
    into "./src/main/resources/static/videos"
    include "*.mp4"
}

task stage(type: Copy, dependsOn: ['bootRepackage']) {
    from ("./build/libs/com.amdinstallation.service.web-${project.version}.jar")
    from (sourceSets.main.resources.srcDirs) {
    	include "application-prod.properties"
    	rename { String fileName -> "application.properties" }
    }
    into "./build/docker"
}

task stageDocker(type: Dockerfile, dependsOn: ['deploy']) {
    dependsOn 'stage'
    destFile = project.file("build/docker/Dockerfile")
    from "java:8"
    copyFile ("com.amdinstallation.service.web-${project.version}.jar", "com.amdinstallation.service.web-${project.version}.jar")
    copyFile ("application.properties", "/config/application.properties")
    entryPoint ("java", "-jar", "com.amdinstallation.service.web-${project.version}.jar")
    exposePort (8080)
    Map<String,String> labels = new HashMap<String,String>();
    labels.put("com.amd.service.id", "com.amdinstallation.service.web");
    labels.put("com.amdinstallation.service.web.version", "${project.version}");
    label(labels)
}

task buildDockerImage(type:Exec) {
	dependsOn 'stageDocker'
  	workingDir './build/docker'
  	commandLine 'docker', 'build', '-t', 'amd/' + bundleName + ':' + project.version, '-t', 'amd/' + bundleName + ':latest', '.'
}

task tagDockerImage(type:Exec) {
	dependsOn 'buildDockerImage'
	workingDir './build/docker'
	commandLine 'docker', 'tag', 'amd/' + bundleName + ':' + project.version, 'localhost:5000/amd/' + bundleName + ':' + project.version
}

task tagDockerImageLatest(type:Exec) {
	dependsOn 'buildDockerImage'
	workingDir './build/docker'
	commandLine 'docker', 'tag', 'amd/' + bundleName + ':latest', 'localhost:5000/amd/' + bundleName + ':latest'
}

task pushDockerImage(type:Exec) {
	dependsOn 'tagDockerImage'
	workingDir './build/docker'
	commandLine 'docker', 'push', 'localhost:5000/amd/' + bundleName + ':' + project.version
}

task pushDockerImageLatest(type:Exec) {
	dependsOn 'tagDockerImageLatest'
	workingDir './build/docker'
	commandLine 'docker', 'push', 'localhost:5000/amd/' + bundleName + ':latest'
}

task publishDocker
publishDocker.dependsOn pushDockerImage
publishDocker.dependsOn pushDockerImageLatest
